{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["match_codes","iata_code_prefix","symbol","iata_code_suffix","map","suffix","prefix","join","App","useState","setPrefix","prefixes","setPrefixes","setSymbol","setSuffix","suffixs","setSuffixs","result","setResult","onNewCodeChange","useCallback","event","target","value","addNewPrefix","toUpperCase","onNewSuffixChange","addNewSuffix","compute","iataCodes","result_string","JSON","stringify","genPrefixs","r","useEffect","console","log","className","type","onChange","onClick","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sOAYeA,MAZf,SAAqBC,EAAkBC,EAAQC,GAO7C,OANaA,EAAiBC,KAAI,SAACC,GAIjC,MAAO,CAAEA,OAHWJ,EAAiBG,KACnC,SAACE,GAAD,OAAYA,EAASJ,EAASG,KAEDE,KAAK,UCgHzBC,MAjHf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACRH,EADQ,KACAI,EADA,OAEiBD,mBAAS,IAF1B,mBAERE,EAFQ,KAEEC,EAFF,OAGaH,mBAAS,IAHtB,mBAGRP,EAHQ,KAGAW,EAHA,OAIaJ,mBAAS,IAJtB,mBAIRJ,EAJQ,KAIAS,EAJA,OAKeL,mBAAS,IALxB,mBAKRM,EALQ,KAKCC,EALD,OAOeP,mBAAS,IAPxB,mBAONQ,EAPM,KAOEC,EAPF,KASPC,EAAkBC,uBAAY,SAACC,GACnCX,EAAUW,EAAMC,OAAOC,SACtB,IAEGC,EAAeJ,uBAAY,WAC/BR,EAAY,GAAD,mBAAKD,GAAL,CAAeL,EAAOmB,iBACjCf,EAAU,MACT,CAACJ,EAAQK,IAENe,EAAoBN,uBAAY,SAACC,GACrCP,EAAUO,EAAMC,OAAOC,SACtB,IAEGI,EAAeP,uBAAY,WAC/BJ,EAAW,GAAD,mBAAKD,GAAL,CAAcV,EAAOoB,iBAC/BX,EAAU,MACT,CAACT,EAAQU,IAENa,EAAUR,uBACd,SAACS,EAAW3B,EAAQa,GAApB,OAAgC,SAACM,GAC/B,IAAMS,EAAgBC,KAAKC,UACzBhC,EAAY6B,EAAW3B,EAAQa,IAEjCG,EAAUY,MAEZ,IAGIG,EAAab,uBAAY,SAACS,GAAD,OAAe,SAACR,GAC7C,IAAMa,EAAIL,EAAUtB,KAAK,KACnBuB,EAAgBC,KAAKC,UAAUE,GACrChB,EAAUY,OAeZ,OAZAK,qBAAU,WACRC,QAAQC,IAAI/B,KACX,CAACA,IAEJ6B,qBAAU,WACRC,QAAQC,IAAI1B,KACX,CAACA,IAEJwB,qBAAU,WACRC,QAAQC,IAAItB,KACX,CAACA,IAGF,yBAAKuB,UAAU,OACb,yBAAKA,UAAU,aACb,wCACA,oDACA,+FACA,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aACb,yCACA,6BACE,2BACEC,KAAK,OACLC,SAAUrB,EACVI,MAAOjB,IAET,2BAAOiC,KAAK,SAAShB,MAAM,MAAMkB,QAASjB,KAE5C,yCACA,6BACE,2BACEe,KAAK,OACLC,SAAU,SAACE,GACT7B,EAAU6B,EAAEpB,OAAOC,QAErBA,MAAOrB,KAIX,yCACA,6BACE,2BACEqC,KAAK,OACLC,SAAUd,EACVH,MAAOlB,IAET,2BAAOkC,KAAK,SAASE,QAASd,EAAcJ,MAAM,SAEpD,2BACEgB,KAAK,SACLhB,MAAM,uBACNkB,QAASR,EAAWtB,KAEtB,2BACE4B,KAAK,SACLhB,MAAM,4BACNkB,QAASb,EAAQjB,EAAUT,EAAQa,OAIzC,sCAAYJ,GACZ,qCAAWI,GACX,sCACA,uBAAGuB,UAAU,eAAb,IAA6BrB,EAA7B,QCnGY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.bf2dada6.chunk.js","sourcesContent":["function match_codes(iata_code_prefix, symbol, iata_code_suffix) {\n  let result = iata_code_suffix.map((suffix) => {\n    let combine_array = iata_code_prefix.map(\n      (prefix) => prefix + symbol + suffix\n    );\n    return { suffix: combine_array.join(\";\") };\n  });\n  return result;\n}\n\n// match_codes([\"CAN\", \"PVG\"], \"-\", [\"ALL\", \"DOM\"]);\n\nexport default match_codes;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport \"./App.css\";\nimport match_codes from \"./utils\";\n\nfunction App() {\n  let [prefix, setPrefix] = useState(\"\");\n  let [prefixes, setPrefixes] = useState([]);\n  let [symbol, setSymbol] = useState(\"\");\n  let [suffix, setSuffix] = useState(\"\");\n  let [suffixs, setSuffixs] = useState([]);\n\n  const [result, setResult] = useState(\"\");\n\n  const onNewCodeChange = useCallback((event) => {\n    setPrefix(event.target.value);\n  }, []);\n\n  const addNewPrefix = useCallback(() => {\n    setPrefixes([...prefixes, prefix.toUpperCase()]);\n    setPrefix(\"\");\n  }, [prefix, prefixes]);\n\n  const onNewSuffixChange = useCallback((event) => {\n    setSuffix(event.target.value);\n  }, []);\n\n  const addNewSuffix = useCallback(() => {\n    setSuffixs([...suffixs, suffix.toUpperCase()]);\n    setSuffix(\"\");\n  }, [suffix, suffixs]);\n\n  const compute = useCallback(\n    (iataCodes, symbol, suffixs) => (event) => {\n      const result_string = JSON.stringify(\n        match_codes(iataCodes, symbol, suffixs)\n      );\n      setResult(result_string);\n    },\n    []\n  );\n\n  const genPrefixs = useCallback((iataCodes) => (event) => {\n    const r = iataCodes.join(\";\");\n    const result_string = JSON.stringify(r);\n    setResult(result_string);\n  });\n\n  useEffect(() => {\n    console.log(prefix);\n  }, [prefix]);\n\n  useEffect(() => {\n    console.log(prefixes);\n  }, [prefixes]);\n\n  useEffect(() => {\n    console.log(suffixs);\n  }, [suffixs]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Work Cat</h1>\n        <h2>IATA Code Match Tool</h2>\n        <p>It's a little tool used for combine iata code and some suffixes.</p>\n        <div className=\"center_container\">\n          <div className=\"container\">\n            <label>Prefix</label>\n            <div>\n              <input\n                type=\"text\"\n                onChange={onNewCodeChange}\n                value={prefix}\n              ></input>\n              <input type=\"button\" value=\"add\" onClick={addNewPrefix}></input>\n            </div>\n            <label>Symbol</label>\n            <div>\n              <input\n                type=\"text\"\n                onChange={(e) => {\n                  setSymbol(e.target.value);\n                }}\n                value={symbol}\n              ></input>\n            </div>\n\n            <label>Suffix</label>\n            <div>\n              <input\n                type=\"text\"\n                onChange={onNewSuffixChange}\n                value={suffix}\n              ></input>\n              <input type=\"button\" onClick={addNewSuffix} value=\"add\"></input>\n            </div>\n            <input\n              type=\"button\"\n              value=\"Generate Prefix list\"\n              onClick={genPrefixs(prefixes)}\n            ></input>\n            <input\n              type=\"button\"\n              value=\"Match Prefixs and Suffixs\"\n              onClick={compute(prefixes, symbol, suffixs)}\n            ></input>\n          </div>\n        </div>\n        <p>Prefixs {prefixes}</p>\n        <p>Suffix {suffixs}</p>\n        <h3>Result</h3>\n        <p className=\"result_card\"> {result} </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}